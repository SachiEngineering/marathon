'''
Find Element in a binary tree 

Given a binary tree (NOT a BST), find a target element 
 

EXAMPLE(S)
    3
   / \
  29  4
 /     \
2       2
       /
      9

For target = 1, return False
For target = 2, return True
 

FUNCTION SIGNATURE
def bfs(root: Node, target: Int) -> Bool
'''

class TreeNode:
    def __init__(self, value, left = None, right = None):
        self.value = value
        self.left = left
        self.right = right

def find_bfs(root: TreeNode, target: int) -> bool:
    if not root:
        return False

    queue = [root]

    while queue:
        currNode = queue.pop(0)

        if currNode.value == target:
            return True

        if currNode.left:
            queue.append(currNode.left)

        if currNode.right:
            queue.append(currNode.right)
            #I lost u on the call


    return False

def find_dfs(root: TreeNode, target: int) -> bool:
    if not root:
        return False

    
    def dfs(node, target):
        if not node:
            return 
            
        if node.value == target:
            return True
    
        else:
            return dfs(node.left,target) or dfs(node.right,target)

    if dfs(root, target) == True:
        return True
    else:
        return False

 

#Verify
tree1 = TreeNode(3, TreeNode(29, TreeNode(2)), TreeNode(4, None, TreeNode(2, TreeNode(9))))

print(find_bfs(None, 1), False)
print(find_bfs(tree1, 9), True)
print(find_bfs(tree1, 1), False)
print(find_bfs(tree1, 2), True)
print(find_bfs(TreeNode(1), 2), False)

print(find_dfs(None, 1), False)
print(find_dfs(tree1, 9), True)
print(find_dfs(tree1, 1), False)
print(find_dfs(tree1, 2), True)
print(find_dfs(TreeNode(1), 2), False)
