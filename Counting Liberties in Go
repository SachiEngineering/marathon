

def countLiberties(board, x, y):
    liberties = 0
    pieceColor = board[x][y]  # The color of the piece to check

    def dfs(r, c):
        nonlocal liberties

        # Check if out of bounds
        if r < 0 or r >= len(board) or c < 0 or c >= len(board):
            return

        # If the cell is checked or is the opposite color
        if board[r][c] == "C" or (board[r][c] != pieceColor and board[r][c] != "+"):
            return

        # If cell is empty, increase liberties
        if board[r][c] == "+":
            liberties += 1
            board[r][c] = "C"  # Mark as visited
            return

        #run dfs on the other locations if the current piece color is the same
        if board[r][c] == pieceColor:
            board[r][c] = "C"  # Mark checked
            dfs(r + 1, c)
            dfs(r - 1, c)
            dfs(r, c + 1)
            dfs(r, c - 1)

    # Start DFS from starting piece
    dfs(x, y)

    return liberties


#testing
print(countLiberties(
  [
    ['+', '+', '+'],
    ['+', 'W', '+'],
    ['+', '+', '+'],
  ],
  1, 1)==4)
       

print(countLiberties(
  [
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', 'B', 'B', 'B', 'B', 'B', '+', '+'],
    ['+', '+', 'B', '+', 'B', '+', 'B', '+', '+'],
    ['+', '+', 'B', 'B', 'B', 'B', 'B', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
  ],
  4, 4
) == 18)

print(countLiberties(
  [
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', 'W', 'W', 'W', 'W', 'W', 'W', 'W', '+'],
    ['+', 'W', 'B', 'B', 'B', 'B', 'B', 'W', '+'],
    ['+', 'W', 'B', '+', 'B', '+', 'B', 'W', '+'],
    ['+', 'W', 'B', 'B', 'B', 'B', 'B', 'W', '+'],
    ['+', 'W', 'W', 'W', 'W', 'W', 'W', 'W', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
  ],
  4, 4
)== 2)

print(countLiberties(
  [
    ['+', '+', '+', 'W', '+', '+', '+', '+', '+'],
    ['+', '+', '+', 'W', 'B', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['W', 'W', 'W', '+', 'B', '+', '+', '+', '+'],
    ['B', 'B', '+', 'B', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
  ],
  3, 2
)==5)

print(countLiberties(
  [
    ['+', '+', '+', 'W', '+', '+', '+', '+', '+'],
    ['+', '+', '+', 'W', 'B', '+', '+', '+', '+'],
    ['+', '+', '+', 'W', '+', '+', '+', '+', '+'],
    ['W', 'W', 'W', '+', 'B', '+', '+', '+', '+'],
    ['B', 'B', '+', 'B', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
  ],
  3, 2
)==5)

print(countLiberties(
  [
    ['+', '+', '+', 'W', '+', '+', '+', '+', '+'],
    ['+', '+', '+', 'W', 'B', '+', '+', '+', '+'],
    ['+', '+', '+', 'W', '+', '+', '+', '+', '+'],
    ['W', 'W', 'W', 'W', 'B', '+', '+', '+', '+'],
    ['B', 'B', '+', 'B', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
    ['+', '+', '+', '+', '+', '+', '+', '+', '+'],
  ],
  3, 2
 )== 8)
