'''
Today, you will be finding the sum of all the left leaves in a binary tree. A left leaf is any leaf node that is the left child of its parent.

Source: https://leetcode.com/problems/sum-of-left-leaves/
 

EXAMPLE(S)
The following tree returns 5, which is the sum of 1 and 4.
     3
   /   \
 1       5
       /
     4
 

FUNCTION SIGNATURE
def sumOfLeftLeaves(root: Optional[TreeNode]) -> int:

Brainstorming:
no tree -> return 0

Planning:
separate function:
if a node doesn't have any children: then it's a leaf

recursive function:
run the no child check on the left node to see if left leaf

base case:
-if no root: return 0

init sum = 0
#if the left child and if the left child is a leaf:
  add to the sum

#run this on both left and right 


#return total sum

Time: O(n) n is the number of nodes in the tree
space: O(h) h is the height of tree

'''
class TreeNode:
  def __init__(self, value = 0, left =None, right =None):
    self.value = value
    self.left = left
    self.right = right

# separate function:
# if a node doesn't have any children: then it's a leaf
def checkLeaf(node):
  if not node.left and not node.right:
    return True
  return False

def sumOfLeftLeaves(root: [TreeNode]) -> int:

  # recursive function:
  # run the no child check on the left node to see if left leaf

  # base case:
  # -if no root: return 0
  if not root:
    return 0

  # init sum = 0
  leftSum = 0

  # #if the left child and if the left child is a leaf:
  if root.left and checkLeaf(root.left):
    leftSum += root.left.value

  # #run this on both left and right: adds to the recursive stack
  leftSum += sumOfLeftLeaves(root.left)
  leftSum += sumOfLeftLeaves(root.right)

  #return
  return leftSum

#Verify
'''
     3
   /   \
 1       5
       /
     4

      3
   /   \
        5
       /
     
'''
trial = TreeNode(3, TreeNode(1), TreeNode(5, TreeNode(4), None))
print(sumOfLeftLeaves(trial)) #5

trial = None
print(sumOfLeftLeaves(trial)) #0

trial = TreeNode(3, None, TreeNode(5))
print(sumOfLeftLeaves(trial)) #0


'''
def sumOfLeftLeaves(root: Optional[TreeNode]) -> int:
    if not root:
        return 0
    res = 0
    if root.left:
        if not root.left.left and not root.left.right:
            res += root.left.val
        else:
            res += sumOfLeftLeaves(root.left)
    res += sumOfLeftLeaves(root.right)
    return res

    
'''



 
