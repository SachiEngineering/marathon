'''
Today, you will be finding the sum of all the left leaves in a binary tree. A left leaf is any leaf node that is the left child of its parent.

Source: https://leetcode.com/problems/sum-of-left-leaves/
 

EXAMPLE(S)
The following tree returns 5, which is the sum of 1 and 4.
     3
   /   \
 1       5
       /
     4
 

FUNCTION SIGNATURE
def sumOfLeftLeaves(root: Optional[TreeNode]) -> int:

Brainstorming:
no tree -> return 0


Time: O(n) n is the number of nodes in the tree
space: O(h) h is the height of tree

'''
class TreeNode:
  def __init__(self, value = 0, left =None, right =None):
    self.value = value
    self.left = left
    self.right = right

def sumOfLeftLeaves(root) -> int:
    if not root:
        return 0
    res = 0
    if root.left:
        if not root.left.left and not root.left.right:
            res += root.left.value
        else:
            res += sumOfLeftLeaves(root.left)
    res += sumOfLeftLeaves(root.right)
    return res

#Verify
'''
     3
   /   \
 1       5
       /
     4

      3
   /   \
        5
       /
     
'''
trial = TreeNode(3, TreeNode(1), TreeNode(5, TreeNode(4), None))
print(sumOfLeftLeaves(trial)) #5

trial = None
print(sumOfLeftLeaves(trial)) #0

trial = TreeNode(3, None, TreeNode(5))
print(sumOfLeftLeaves(trial)) #0





    




 
